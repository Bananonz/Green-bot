const { getData: getData } = require("spotify-url-info"), BaseCommand = require("../../abstract/BaseCommand.js");
class Play extends BaseCommand {get name() { return "playtop" }
    get aliases() { return ["ptop", "pt"] }get description() { return "Adds a music in the top of the queue" }
    get category() { return "Everyone Commands" }get playerCheck() { return { voice: !0, dispatcher: !0, channel: !0, vote: !0 } }
    get arguments() { return [{ type: 3, name: "query", description: "The track you want to play", required: !0 }] }
    static wait(e) { return new Promise(t => setTimeout(t, e).unref()) }
    async run({ ctx: e }) { let t = e.args.length ? e.args[0].value : null; const a = e.client.shoukaku.getNode(); if (!a) return e.errorMessage("No nodes are available yet! You can report this error is [Green bot Server](https://discord.gg/greenbot)"); let r = await e.client.queue.create(e, a); const s = await e.client.shoukaku.search(a, t, e); if (t.includes("spotify")) { if (!s || !s.raw) return e.errorMessage("No results found on spotify for your query!\nIf that's a playlist, it's maybe private! [How to make a spotify playlist public?](https://www.androidauthority.com/make-spotify-playlist-public-3075538/)"); if ("track" === s.sp.type) r.addTrack(s.raw, e.author), r.playing ? e.reply({ embeds: [{ description: `Enqueued **[${s.sp.tracks[0].title.slice(0,100)}](${s.sp.tracks[0].originURL})** at the top of the queue`, color: "#3a871f" }] }) : r.play(), e.successMessage("<a:green_loading:824308769713815612> Creating the player...");
            else if ("playlist" === s.sp.type) { e.reply({ embeds: [{ description: `Added [${s.sp.name.slice(0,50)}](${t}) with ${s.raw.length} tracks ${e.guildDB.auto_shuffle?"ðŸ”€ And automatically shuffled":""}`, color: "#3a871f" }] }).catch(() => null); for (const t of s.raw) { if (s.scraped && !t.track) return; let a = { info: { image: s.scraped ? t.image : t.thumbnail, title: s.scraped ? t.name : t.title, uri: s.scraped ? t.track.external_urls.spotify : t.originURL, sp: !0, author: t.scraped ? null : t.artists, requester: { name: e.author.username, id: e.author.id, avatar: e.author.displayAvatarURL({ size: 512, format: "png" }) } } };
                    r.queue.push(a, null, "top") }
                r.tracksAdded(), e.guildDB.auto_shuffle && (e.dispatcher.queue = e.dispatcher.queue.sort(() => Math.random() - .5)), setTimeout(() => { r.playing || r.play() }, 1e3) } else { if ("album" !== s.sp.type) return e.errorMessage("No results found on spotify for your query!\nIf that's a playlist, it's maybe private! [How to make a spotify playlist public?](https://www.androidauthority.com/make-spotify-playlist-public-3075538/)"); for (const t of s.raw) { let a = { info: { title: s.scraped ? t.name : t.title, author: s.scraped ? t.artists[0].name : t.artists, uri: s.scraped ? t.external_urls.spotify : t.originURL, sp: !0, image: s.scraped ? t.image : t.thumbnail, requester: { name: e.author.username, id: e.author.id, avatar: e.author.displayAvatarURL({ dynamic: !0 }) } } };
                    r.queue.push(a, null, top) }
                r.tracksAdded(), e.guildDB.auto_shuffle && (e.dispatcher.queue = e.dispatcher.queue.sort(() => Math.random() - .5)), e.reply({ embeds: [{ description: `Added [${s.sp.name.slice(0,50)}](${t}) with ${s.raw.length} tracks at the top of the queue${e.guildDB.auto_shuffle?"\nðŸ”€ And automatically shuffled":""}`, color: "#3a871f" }] }).catch(() => null), setTimeout(() => { r.playing || r.play() }, 1e3) } return } const { type: o, tracks: u, playlistName: i } = s; if ("PLAYLIST" !== o) { if (!s.tracks.length) return e.errorMessage("I didn't find any song on the query you provided!"); const t = s.tracks[0]; if ("Discord" === t.info.author) return e.errorMessage("I didn't find any song on the query you provided!");
            r.playing ? e.reply({ embeds: [{ description: `Enqueued **[${t.info.title.slice(0,100)}](${t.info.uri})** at the top of the queue!`, color: "#3a871f" }] }) : e.successMessage("Successfuly created the played and joined your channel!"), await r.addTrack(t, e.author, "top") } else { for (let t of u) t.info.requester = { name: e.author.username, id: e.author.id }, r.queue.push(t, null, "top");
            r.tracksAdded(), e.guildDB.auto_shuffle && setTimeout(() => { e.dispatcher.queue = e.dispatcher.queue.sort(() => Math.random() - .5) }, 2e3), e.reply({ embeds: [{ description: `Added [${i.slice(0,50)}](${t}) with ${u.length} tracks at the top of the queue ${e.guildDB.auto_shuffle?"\nðŸ”€ And automatically shuffled":""}`, color: "#3a871f" }] }).catch(() => null), r.playing || r.play() } }
    checkPl(e) { var t = e.match(/^.*(youtu.be\/|list=)([^#\&\?]*).*/); return !(!t || !t[2]) } }
module.exports = Play;