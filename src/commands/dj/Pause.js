const BaseCommand = require("../../abstract/BaseCommand.js");
class Pause extends BaseCommand {get name() { return "pause" }
    get description() { return "Pauses the current playback!" }get category() { return "Queue Management" }
    get playerCheck() { return { voice: !0, dispatcher: !0, channel: !0 } }
    run({ ctx: e }) { return e.client.queue._sockets.find(s => s.serverId === e.guild.id) && e.client.queue._sockets.filter(s => s.serverId === e.guild.id).forEach(s => { e.client.queue.emitOp({ changes: ["CURRENT_SONG"], socketId: s.id, serverId: e.guild.id, queueData: { current: e.dispatcher.current, paused: !e.dispatcher.player.paused, loop: "queue" === e.dispatcher.repeat } }) }), e.dispatcher.lastMessage && e.dispatcher.lastMessage.edit({ embeds: e.dispatcher.lastMessage.embeds, components: [{ components: [{ customId: "back_button", label: "Back", style: 3, type: "BUTTON" }, { customId: "stop", label: "Stop", style: 4, type: "BUTTON" }, { customId: "pause_btn", label: e.dispatcher.player.paused ? "Pause" : "Resume", style: 1, type: "BUTTON" }, { customId: "skip", label: "Skip", style: 3, type: "BUTTON" }, { customId: "like", emoji: "❤", style: 2, type: "BUTTON" }], type: "ACTION_ROW" }] }), e.dispatcher.player.paused ? (e.dispatcher.player.setPaused(!1), e.successMessage("▶ Music unpaused!")) : (e.dispatcher.player.setPaused(!0), e.successMessage("⏸ Music paused!")) } }
module.exports = Pause;